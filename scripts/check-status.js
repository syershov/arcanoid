#!/usr/bin/env node

import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
const execCommand = (command) => {
  try {
    return execSync(command, { encoding: 'utf8', stdio: 'pipe' }).trim();
  } catch (error) {
    return '';
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Vite
const checkViteProcesses = () => {
  const output = execCommand('ps aux | grep "vite" | grep -v grep');
  if (!output) return [];

  return output.split('\n').map(line => {
    const parts = line.trim().split(/\s+/);
    const pid = parts[1];
    const command = parts.slice(10).join(' ');
    return { pid, command };
  });
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
const checkOccupiedPorts = () => {
  const output = execCommand('lsof -i :3000 -i :3001 -i :3002 -i :3003 | grep LISTEN');
  if (!output) return [];

  return output.split('\n').map(line => {
    const parts = line.trim().split(/\s+/);
    const process = parts[0];
    const pid = parts[1];
    const portInfo = parts[8];

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ, —Ç–∞–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    let port = portInfo.split(':')[1];

    // –ï—Å–ª–∏ –ø–æ—Ä—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä
    if (port === 'hbci') port = '3000';
    else if (port === 'redwood-broker') port = '3001';
    else if (port === 'exlm-agent') port = '3002';
    else if (port === 'cgms') port = '3003';

    return { process, pid, port };
  });
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL –ø—Ä–æ–µ–∫—Ç–∞
const determineProjectUrl = (ports) => {
  const vitePorts = ports.filter(p => p.process === 'node');
  if (vitePorts.length === 0) return null;

  const port = vitePorts[0].port;
  return `http://localhost:${port}`;
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const checkProjectStatus = () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ Arcanoid...\n');

  const viteProcesses = checkViteProcesses();
  const occupiedPorts = checkOccupiedPorts();

  const status = {
    isRunning: viteProcesses.length > 0,
    processes: viteProcesses,
    ports: occupiedPorts,
    url: determineProjectUrl(occupiedPorts)
  };

  return status;
};

// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const displayStatus = (status) => {
  if (status.isRunning) {
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–ø—É—â–µ–Ω!');
    console.log(`üìç URL: ${status.url || '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è...'}`);
    console.log(`‚ö° –ü—Ä–æ—Ü–µ—Å—Å—ã (${status.processes.length}):`);

    status.processes.forEach((proc, index) => {
      console.log(`   ${index + 1}. PID: ${proc.pid} - ${proc.command}`);
    });

    if (status.ports.length > 0) {
      console.log(`üîå –ó–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã:`);
      status.ports.forEach(port => {
        console.log(`   - –ü–æ—Ä—Ç ${port.port}: ${port.process} (PID: ${port.pid})`);
      });
    }

    console.log('\nüí° –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log('   npm run stop     - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');
    console.log('   npm run restart  - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä');

  } else {
    console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');

    if (status.ports.length > 0) {
      console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã (–Ω–µ Vite):');
      status.ports.forEach(port => {
        console.log(`   - –ü–æ—Ä—Ç ${port.port}: ${port.process} (PID: ${port.pid})`);
      });
    }

    console.log('\nüöÄ –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞:');
    console.log('   npm run dev:system  - –∑–∞–ø—É—Å–∫ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    console.log('   npm run dev         - –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫');
    console.log('   npm run dev:default - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
  }
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
const main = () => {
  try {
    const status = checkProjectStatus();
    displayStatus(status);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
    process.exit(status.isRunning ? 0 : 1);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    process.exit(2);
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { checkProjectStatus, checkViteProcesses, checkOccupiedPorts };

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

# Базовые правила проекта Arcanoid

## Общие принципы разработки

### 1. Структура кода
- Используйте модульную архитектуру
- Разделяйте логику игры, рендеринг и управление входными данными
- Применяйте принципы SOLID при проектировании классов
- Поддерживайте чистоту кода и читаемость

### 2. Игровая логика
- Все игровые объекты должны иметь четко определенные границы и коллизии
- Физика мяча должна быть предсказуемой и консистентной
- Скорость игры должна быть независимой от частоты кадров (frame rate independent)
- Состояние игры должно быть легко сохраняемым и восстанавливаемым

### 3. Производительность
- Оптимизируйте отрисовку для плавного геймплея (60 FPS)
- Используйте эффективные алгоритмы для обнаружения коллизий
- Минимизируйте создание/уничтожение объектов во время игры
- Кэшируйте ресурсы (спрайты, звуки, текстуры)

### 4. Пользовательский интерфейс
- Интерфейс должен быть интуитивно понятным
- Поддерживайте различные разрешения экрана
- Обеспечьте отзывчивость управления
- Включите настройки для accessibility
- Интерфейс должен быть адаптирован для десктопа и мобильных платформ

## Игровые правила Arcanoid

### 1. Основная механика
- Игрок управляет платформой внизу экрана
- Мяч отскакивает от платформы, стен и блоков
- Цель: разрушить все блоки на уровне
- Игра заканчивается при потере всех жизней

### 2. Коллизии
- Мяч меняет направление при столкновении с объектами
- Угол отскока от платформы зависит от точки касания
- Блоки исчезают при попадании мяча
- Некоторые блоки могут требовать несколько попаданий

### 3. Система очков
- Очки начисляются за разрушение блоков
- Бонусные очки за скорость прохождения уровня
- Мультипликаторы очков для комбо-ударов
- Система рекордов и достижений

### 4. Бонусы и power-ups
- Увеличение/уменьшение размера платформы
- Ускорение/замедление мяча
- Дополнительные мячи
- Проникающий мяч (проходит через блоки)
- Магнитная платформа

## Технические требования

### 1. Контроль версий
- Используйте осмысленные commit сообщения
- Создавайте ветки для новых функций
- Проводите code review перед merge
- Поддерживайте чистоту истории коммитов

### 2. Тестирование
- Покрывайте критическую логику unit-тестами
- Тестируйте граничные случаи (edge cases)
- Проводите интеграционное тестирование
- Тестируйте производительность

### 3. Документация
- Документируйте публичные API
- Поддерживайте README актуальным
- Создавайте диаграммы архитектуры для сложных систем
- Ведите changelog для релизов

### 4. Безопасность
- Валидируйте все входные данные
- Защищайте от читерства (если есть онлайн-функции)
- Безопасно храните пользовательские данные
- Регулярно обновляйте зависимости

## Стандарты кода

### 1. Именование
- Используйте описательные имена для переменных и функций
- Следуйте соглашениям языка программирования
- Избегайте сокращений и аббревиатур
- Используйте единообразный стиль именования

### 2. Комментарии
- Комментируйте сложную логику
- Объясняйте "почему", а не "что"
- Поддерживайте комментарии актуальными
- Используйте TODO для временных решений

### 3. Форматирование
- Используйте автоматическое форматирование кода
- Поддерживайте консистентный стиль отступов
- Ограничивайте длину строк (80-120 символов)
- Группируйте связанный код логически

## Релизы и развертывание

### 1. Версионирование
- Используйте семантическое версионирование (SemVer)
- Тегируйте релизы в Git
- Ведите changelog для каждой версии
- Тестируйте релизы перед публикацией

### 2. Сборка
- Автоматизируйте процесс сборки
- Создавайте reproducible builds
- Оптимизируйте размер финальной сборки
- Поддерживайте multiple platforms при необходимости

# Правила управления запуском проекта Arcanoid

## Правило проверки запущенного проекта

### Основное правило
**ВСЕГДА проверять наличие запущенного процесса Vite перед новым запуском проекта**

### Алгоритм проверки

#### 1. Проверка процессов Vite
```bash
ps aux | grep "vite" | grep -v grep
```
- Если найдены процессы - проект уже запущен
- Если процессов нет - можно запускать

#### 2. Проверка занятых портов
```bash
lsof -i :3000 -i :3001 -i :3002 -i :3003 | grep LISTEN
```
- Проверить порты 3000-3003 (стандартные порты Vite)
- Если порты заняты - определить URL для доступа

#### 3. Определение URL проекта
```bash
netstat -an | grep LISTEN | grep -E "300[0-9]"
```
- Найти точный порт запущенного сервера
- Сформировать URL: `http://localhost:ПОРТ`

### Действия при обнаружении запущенного проекта

#### ✅ ПРАВИЛЬНЫЕ действия:
1. **Сообщить пользователю**: "Проект уже запущен на http://localhost:ПОРТ"
2. **Предложить варианты**:
   - Использовать существующий сервер
   - Перезапустить сервер (остановить + запустить)
   - Запустить на другом порту принудительно
3. **НЕ запускать** новый процесс автоматически

#### ❌ НЕПРАВИЛЬНЫЕ действия:
1. Запускать проект без проверки
2. Создавать множественные процессы Vite
3. Занимать дополнительные порты без необходимости

### Команды управления

#### Проверка статуса
```bash
# Быстрая проверка
npm run status  # (если добавить скрипт)

# Ручная проверка
ps aux | grep vite | grep -v grep
```

#### Остановка сервера
```bash
# Мягкая остановка
pkill -f "vite"

# Принудительная остановка
pkill -9 -f "vite"
```

#### Перезапуск
```bash
# Остановить + запустить
pkill -f "vite" && npm run dev:system
```

### Сценарии использования

#### Сценарий 1: Первый запуск
1. Проверить процессы Vite → НЕТ
2. Проверить порты → СВОБОДНЫ
3. ✅ Запустить проект

#### Сценарий 2: Проект уже запущен
1. Проверить процессы Vite → ЕСТЬ
2. Определить порт → 3000
3. ❌ НЕ запускать новый
4. ✅ Сообщить: "Проект работает на http://localhost:3000"

#### Сценарий 3: Порт занят другим процессом
1. Проверить процессы Vite → НЕТ
2. Проверить порт 3000 → ЗАНЯТ (не Vite)
3. ✅ Запустить на следующем свободном порту

#### Сценарий 4: Зависший процесс
1. Проверить процессы Vite → ЕСТЬ
2. Проверить порты → НЕ ОТВЕЧАЕТ
3. ✅ Остановить зависший процесс
4. ✅ Запустить заново

### Реализация в коде

#### Функция проверки статуса
```javascript
// project-status.js
export const checkProjectStatus = async () => {
  const viteProcesses = await execCommand('ps aux | grep "vite" | grep -v grep');
  const occupiedPorts = await execCommand('lsof -i :3000 -i :3001 -i :3002 -i :3003 | grep LISTEN');

  return {
    isRunning: viteProcesses.length > 0,
    ports: parseOccupiedPorts(occupiedPorts),
    url: determineProjectUrl(occupiedPorts)
  };
};
```

### Интеграция с npm скриптами

```json
{
  "scripts": {
    "status": "node scripts/check-status.js",
    "dev:safe": "node scripts/safe-start.js",
    "stop": "pkill -f vite",
    "restart": "npm run stop && npm run dev:system"
  }
}
```

### Сообщения пользователю

#### При обнаружении запущенного проекта:
```
🎮 Проект Arcanoid уже запущен!
📍 URL: http://localhost:3000
⚡ Процесс: node vite --open (PID: 35182)

Выберите действие:
1. Использовать существующий сервер
2. Перезапустить сервер
3. Запустить на другом порту
```

#### При успешном запуске:
```
🎮 Проект Arcanoid запущен!
📍 URL: http://localhost:3000
🌐 Браузер: Открыт автоматически
```

### Исключения

#### Когда можно запускать множественные процессы:
1. **Разные режимы**: dev + preview одновременно
2. **Тестирование**: специальные тестовые конфигурации
3. **Принудительный запрос пользователя**: явное указание запустить на другом порту

#### Предупреждения:
- Множественные процессы потребляют больше ресурсов
- Могут возникнуть конфликты портов
- Усложняется отладка и мониторинг

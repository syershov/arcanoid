# Базовые правила проекта Arcanoid

## Общие принципы разработки

### 1. Структура кода
- Используйте модульную архитектуру
- Разделяйте логику игры, рендеринг и управление входными данными
- Применяйте принципы SOLID при проектировании классов
- Поддерживайте чистоту кода и читаемость

### 2. Игровая логика
- Все игровые объекты должны иметь четко определенные границы и коллизии
- Физика мяча должна быть предсказуемой и консистентной
- Скорость игры должна быть независимой от частоты кадров (frame rate independent)
- Состояние игры должно быть легко сохраняемым и восстанавливаемым

### 3. Производительность
- Оптимизируйте отрисовку для плавного геймплея (60 FPS)
- Используйте эффективные алгоритмы для обнаружения коллизий
- Минимизируйте создание/уничтожение объектов во время игры
- Кэшируйте ресурсы (спрайты, звуки, текстуры)

### 4. Пользовательский интерфейс
- Интерфейс должен быть интуитивно понятным
- Поддерживайте различные разрешения экрана
- Обеспечьте отзывчивость управления
- Включите настройки для accessibility
- Интерфейс должен быть адаптирован для десктопа и мобильных платформ

## Игровые правила Arcanoid

### 1. Основная механика
- Игрок управляет платформой внизу экрана
- Мяч отскакивает от платформы, стен и блоков
- Цель: разрушить все блоки на уровне
- Игра заканчивается при потере всех жизней

### 2. Коллизии
- Мяч меняет направление при столкновении с объектами
- Угол отскока от платформы зависит от точки касания
- Блоки исчезают при попадании мяча
- Некоторые блоки могут требовать несколько попаданий

### 3. Система очков
- Очки начисляются за разрушение блоков
- Бонусные очки за скорость прохождения уровня
- Мультипликаторы очков для комбо-ударов
- Система рекордов и достижений

### 4. Бонусы и power-ups
- Увеличение/уменьшение размера платформы
- Ускорение/замедление мяча
- Дополнительные мячи
- Проникающий мяч (проходит через блоки)
- Магнитная платформа

## Технические требования

### 1. Контроль версий
- Используйте осмысленные commit сообщения
- Создавайте ветки для новых функций
- Проводите code review перед merge
- Поддерживайте чистоту истории коммитов

### 2. Тестирование
- Покрывайте критическую логику unit-тестами
- Тестируйте граничные случаи (edge cases)
- Проводите интеграционное тестирование
- Тестируйте производительность

### 3. Документация
- Документируйте публичные API
- Поддерживайте README актуальным
- Создавайте диаграммы архитектуры для сложных систем
- Ведите changelog для релизов

### 4. Безопасность
- Валидируйте все входные данные
- Защищайте от читерства (если есть онлайн-функции)
- Безопасно храните пользовательские данные
- Регулярно обновляйте зависимости

## Стандарты кода

### 1. Именование
- Используйте описательные имена для переменных и функций
- Следуйте соглашениям языка программирования
- Избегайте сокращений и аббревиатур
- Используйте единообразный стиль именования

### 2. Комментарии
- Комментируйте сложную логику
- Объясняйте "почему", а не "что"
- Поддерживайте комментарии актуальными
- Используйте TODO для временных решений

### 3. Форматирование
- Используйте автоматическое форматирование кода
- Поддерживайте консистентный стиль отступов
- Ограничивайте длину строк (80-120 символов)
- Группируйте связанный код логически

## Релизы и развертывание

### 1. Версионирование
- Используйте семантическое версионирование (SemVer)
- Тегируйте релизы в Git
- Ведите changelog для каждой версии
- Тестируйте релизы перед публикацией

### 2. Сборка
- Автоматизируйте процесс сборки
- Создавайте reproducible builds
- Оптимизируйте размер финальной сборки
- Поддерживайте multiple platforms при необходимости
